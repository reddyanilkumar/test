



In [1]:



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline




In [3]:



from sklearn.preprocessing import Imputer
from sklearn.feature_extraction import DictVectorizer
from sklearn.preprocessing import StandardScaler
from sklearn.cross_validation import train_test_split
#from ml_metrics import quadratic_weighted_kappa
from sklearn.linear_model import Ridge
from sklearn.metrics import make_scorer
from sklearn.grid_search import GridSearchCV




In [6]:



data = pd.read_csv("train.csv/train.csv")
test_data_df  = pd.read_csv("test.csv/test.csv")




In [14]:



# Separate features and labels. Note that the last column contain the labels.
X_raw = data[data.columns[:-1]]
y = data[data.columns[-1]]




In [17]:



# Get basic information and print it.
n_samples = X_raw.shape[0]
n_features = X_raw.shape[1]
print "Number of training samples: {}".format(n_samples)
print "Number of features: {}".format(n_features)






Number of training samples: 59381
Number of features: 127




In [22]:



print X_raw.isnull().sum()






Id                         0
Product_Info_1             0
Product_Info_2             0
Product_Info_3             0
Product_Info_4             0
Product_Info_5             0
Product_Info_6             0
Product_Info_7             0
Ins_Age                    0
Ht                         0
Wt                         0
BMI                        0
Employment_Info_1         19
Employment_Info_2          0
Employment_Info_3          0
Employment_Info_4       6779
Employment_Info_5          0
Employment_Info_6      10854
InsuredInfo_1              0
InsuredInfo_2              0
InsuredInfo_3              0
InsuredInfo_4              0
InsuredInfo_5              0
InsuredInfo_6              0
InsuredInfo_7              0
Insurance_History_1        0
Insurance_History_2        0
Insurance_History_3        0
Insurance_History_4        0
Insurance_History_5    25396
                       ...  
Medical_Keyword_19         0
Medical_Keyword_20         0
Medical_Keyword_21         0
Medical_Keyword_22         0
Medical_Keyword_23         0
Medical_Keyword_24         0
Medical_Keyword_25         0
Medical_Keyword_26         0
Medical_Keyword_27         0
Medical_Keyword_28         0
Medical_Keyword_29         0
Medical_Keyword_30         0
Medical_Keyword_31         0
Medical_Keyword_32         0
Medical_Keyword_33         0
Medical_Keyword_34         0
Medical_Keyword_35         0
Medical_Keyword_36         0
Medical_Keyword_37         0
Medical_Keyword_38         0
Medical_Keyword_39         0
Medical_Keyword_40         0
Medical_Keyword_41         0
Medical_Keyword_42         0
Medical_Keyword_43         0
Medical_Keyword_44         0
Medical_Keyword_45         0
Medical_Keyword_46         0
Medical_Keyword_47         0
Medical_Keyword_48         0
dtype: int64




In [21]:



# Print percentage of missing data of all columns with missing data.
perc_mvs_per_col = (X_raw.isnull().sum() / n_samples) * 100
print perc_mvs_per_col[perc_mvs_per_col > 0]






Employment_Info_1       0.031997
Employment_Info_4      11.416110
Employment_Info_6      18.278574
Insurance_History_5    42.767889
Family_Hist_2          48.257860
Family_Hist_3          57.663226
Family_Hist_4          32.306630
Family_Hist_5          70.411411
Medical_History_1      14.969435
Medical_History_10     99.061990
Medical_History_15     75.101463
Medical_History_24     93.598963
Medical_History_32     98.135767
dtype: float64




In [26]:



list(perc_mvs_per_col[perc_mvs_per_col > 80].index)





Out[26]:

['Medical_History_10', 'Medical_History_24', 'Medical_History_32']



In [27]:



# Drop columns with more than 80% of missing data.
cols_to_drop = list(perc_mvs_per_col[perc_mvs_per_col > 80].index)
X_drop_some = X_raw.drop(cols_to_drop, axis=1)




In [65]:



X_raw.InsuredInfo_2





Out[65]:

0        2
1        2
2        2
3        2
4        2
5        2
6        2
7        2
8        2
9        2
10       2
11       2
12       2
13       2
14       2
15       2
16       2
17       2
18       3
19       2
20       2
21       2
22       2
23       2
24       2
25       2
26       2
27       2
28       2
29       2
        ..
59351    2
59352    2
59353    2
59354    2
59355    2
59356    2
59357    2
59358    2
59359    2
59360    2
59361    2
59362    2
59363    2
59364    2
59365    2
59366    2
59367    2
59368    2
59369    2
59370    2
59371    2
59372    2
59373    2
59374    2
59375    2
59376    2
59377    2
59378    2
59379    2
59380    2
Name: InsuredInfo_2, dtype: int64



In [33]:



categorical_features = X_raw.select_dtypes(['object']).columns




In [39]:



def type_of_features(df, col_types):
    cat_features = df.select_dtypes(col_types)
    
    for cat in cat_features:
        print 'Feature Name: {} and number of unique values {} '.format(cat, len(df[cat].unique()))




In [41]:



type_of_features(X_raw, ['int64', 'float64', 'int32', 'float32'])






Feature Name: Id and number of unique values 59381 
Feature Name: Product_Info_1 and number of unique values 2 
Feature Name: Product_Info_3 and number of unique values 34 
Feature Name: Product_Info_4 and number of unique values 1491 
Feature Name: Product_Info_5 and number of unique values 2 
Feature Name: Product_Info_6 and number of unique values 2 
Feature Name: Product_Info_7 and number of unique values 3 
Feature Name: Ins_Age and number of unique values 65 
Feature Name: Ht and number of unique values 39 
Feature Name: Wt and number of unique values 300 
Feature Name: BMI and number of unique values 3256 
Feature Name: Employment_Info_1 and number of unique values 1937 
Feature Name: Employment_Info_2 and number of unique values 36 
Feature Name: Employment_Info_3 and number of unique values 2 
Feature Name: Employment_Info_4 and number of unique values 872 
Feature Name: Employment_Info_5 and number of unique values 2 
Feature Name: Employment_Info_6 and number of unique values 993 
Feature Name: InsuredInfo_1 and number of unique values 3 
Feature Name: InsuredInfo_2 and number of unique values 2 
Feature Name: InsuredInfo_3 and number of unique values 11 
Feature Name: InsuredInfo_4 and number of unique values 2 
Feature Name: InsuredInfo_5 and number of unique values 2 
Feature Name: InsuredInfo_6 and number of unique values 2 
Feature Name: InsuredInfo_7 and number of unique values 2 
Feature Name: Insurance_History_1 and number of unique values 2 
Feature Name: Insurance_History_2 and number of unique values 3 
Feature Name: Insurance_History_3 and number of unique values 3 
Feature Name: Insurance_History_4 and number of unique values 3 
Feature Name: Insurance_History_5 and number of unique values 2266 
Feature Name: Insurance_History_7 and number of unique values 3 
Feature Name: Insurance_History_8 and number of unique values 3 
Feature Name: Insurance_History_9 and number of unique values 3 
Feature Name: Family_Hist_1 and number of unique values 3 
Feature Name: Family_Hist_2 and number of unique values 69 
Feature Name: Family_Hist_3 and number of unique values 91 
Feature Name: Family_Hist_4 and number of unique values 69 
Feature Name: Family_Hist_5 and number of unique values 91 
Feature Name: Medical_History_1 and number of unique values 172 
Feature Name: Medical_History_2 and number of unique values 579 
Feature Name: Medical_History_3 and number of unique values 3 
Feature Name: Medical_History_4 and number of unique values 2 
Feature Name: Medical_History_5 and number of unique values 3 
Feature Name: Medical_History_6 and number of unique values 3 
Feature Name: Medical_History_7 and number of unique values 3 
Feature Name: Medical_History_8 and number of unique values 3 
Feature Name: Medical_History_9 and number of unique values 3 
Feature Name: Medical_History_10 and number of unique values 104 
Feature Name: Medical_History_11 and number of unique values 3 
Feature Name: Medical_History_12 and number of unique values 3 
Feature Name: Medical_History_13 and number of unique values 3 
Feature Name: Medical_History_14 and number of unique values 3 
Feature Name: Medical_History_15 and number of unique values 242 
Feature Name: Medical_History_16 and number of unique values 3 
Feature Name: Medical_History_17 and number of unique values 3 
Feature Name: Medical_History_18 and number of unique values 3 
Feature Name: Medical_History_19 and number of unique values 3 
Feature Name: Medical_History_20 and number of unique values 3 
Feature Name: Medical_History_21 and number of unique values 3 
Feature Name: Medical_History_22 and number of unique values 2 
Feature Name: Medical_History_23 and number of unique values 3 
Feature Name: Medical_History_24 and number of unique values 228 
Feature Name: Medical_History_25 and number of unique values 3 
Feature Name: Medical_History_26 and number of unique values 3 
Feature Name: Medical_History_27 and number of unique values 3 
Feature Name: Medical_History_28 and number of unique values 3 
Feature Name: Medical_History_29 and number of unique values 3 
Feature Name: Medical_History_30 and number of unique values 3 
Feature Name: Medical_History_31 and number of unique values 3 
Feature Name: Medical_History_32 and number of unique values 96 
Feature Name: Medical_History_33 and number of unique values 2 
Feature Name: Medical_History_34 and number of unique values 3 
Feature Name: Medical_History_35 and number of unique values 3 
Feature Name: Medical_History_36 and number of unique values 3 
Feature Name: Medical_History_37 and number of unique values 3 
Feature Name: Medical_History_38 and number of unique values 2 
Feature Name: Medical_History_39 and number of unique values 3 
Feature Name: Medical_History_40 and number of unique values 3 
Feature Name: Medical_History_41 and number of unique values 3 
Feature Name: Medical_Keyword_1 and number of unique values 2 
Feature Name: Medical_Keyword_2 and number of unique values 2 
Feature Name: Medical_Keyword_3 and number of unique values 2 
Feature Name: Medical_Keyword_4 and number of unique values 2 
Feature Name: Medical_Keyword_5 and number of unique values 2 
Feature Name: Medical_Keyword_6 and number of unique values 2 
Feature Name: Medical_Keyword_7 and number of unique values 2 
Feature Name: Medical_Keyword_8 and number of unique values 2 
Feature Name: Medical_Keyword_9 and number of unique values 2 
Feature Name: Medical_Keyword_10 and number of unique values 2 
Feature Name: Medical_Keyword_11 and number of unique values 2 
Feature Name: Medical_Keyword_12 and number of unique values 2 
Feature Name: Medical_Keyword_13 and number of unique values 2 
Feature Name: Medical_Keyword_14 and number of unique values 2 
Feature Name: Medical_Keyword_15 and number of unique values 2 
Feature Name: Medical_Keyword_16 and number of unique values 2 
Feature Name: Medical_Keyword_17 and number of unique values 2 
Feature Name: Medical_Keyword_18 and number of unique values 2 
Feature Name: Medical_Keyword_19 and number of unique values 2 
Feature Name: Medical_Keyword_20 and number of unique values 2 
Feature Name: Medical_Keyword_21 and number of unique values 2 
Feature Name: Medical_Keyword_22 and number of unique values 2 
Feature Name: Medical_Keyword_23 and number of unique values 2 
Feature Name: Medical_Keyword_24 and number of unique values 2 
Feature Name: Medical_Keyword_25 and number of unique values 2 
Feature Name: Medical_Keyword_26 and number of unique values 2 
Feature Name: Medical_Keyword_27 and number of unique values 2 
Feature Name: Medical_Keyword_28 and number of unique values 2 
Feature Name: Medical_Keyword_29 and number of unique values 2 
Feature Name: Medical_Keyword_30 and number of unique values 2 
Feature Name: Medical_Keyword_31 and number of unique values 2 
Feature Name: Medical_Keyword_32 and number of unique values 2 
Feature Name: Medical_Keyword_33 and number of unique values 2 
Feature Name: Medical_Keyword_34 and number of unique values 2 
Feature Name: Medical_Keyword_35 and number of unique values 2 
Feature Name: Medical_Keyword_36 and number of unique values 2 
Feature Name: Medical_Keyword_37 and number of unique values 2 
Feature Name: Medical_Keyword_38 and number of unique values 2 
Feature Name: Medical_Keyword_39 and number of unique values 2 
Feature Name: Medical_Keyword_40 and number of unique values 2 
Feature Name: Medical_Keyword_41 and number of unique values 2 
Feature Name: Medical_Keyword_42 and number of unique values 2 
Feature Name: Medical_Keyword_43 and number of unique values 2 
Feature Name: Medical_Keyword_44 and number of unique values 2 
Feature Name: Medical_Keyword_45 and number of unique values 2 
Feature Name: Medical_Keyword_46 and number of unique values 2 
Feature Name: Medical_Keyword_47 and number of unique values 2 
Feature Name: Medical_Keyword_48 and number of unique values 2 




In [43]:



type_of_features(X_raw, ['object'])






Feature Name: Product_Info_2 and number of unique values 19 




In [66]:



cols_to_drop = ['Medical_History_10', 'Medical_History_24', 'Medical_History_32']

categorical_cols = ['Product_Info_1', 'Product_Info_2', 'Product_Info_3', 'Product_Info_5', \
                    'Product_Info_6', 'Product_Info_7', 'Employment_Info_2', 'Employment_Info_3', \
                    'Employment_Info_5', 'InsuredInfo_1', 'InsuredInfo_2', 'InsuredInfo_3', \
                    'InsuredInfo_4', 'InsuredInfo_5', 'InsuredInfo_6', 'InsuredInfo_7', \
                    'Insurance_History_1', 'Insurance_History_2', 'Insurance_History_3', \
                    'Insurance_History_4', 'Insurance_History_7', 'Insurance_History_8', \
                    'Insurance_History_9', 'Family_Hist_1', 'Medical_History_2', 'Medical_History_3', \
                    'Medical_History_4', 'Medical_History_5', 'Medical_History_6', 'Medical_History_7', \
                    'Medical_History_8', 'Medical_History_9', 'Medical_History_11', 'Medical_History_12', \
                    'Medical_History_13', 'Medical_History_14', 'Medical_History_16', 'Medical_History_17', \
                    'Medical_History_18', 'Medical_History_19', 'Medical_History_20', 'Medical_History_21', \
                    'Medical_History_22', 'Medical_History_23', 'Medical_History_25', 'Medical_History_26', \
                    'Medical_History_27', 'Medical_History_28', 'Medical_History_29', 'Medical_History_30', \
                    'Medical_History_31', 'Medical_History_33', 'Medical_History_34', 'Medical_History_35', \
                    'Medical_History_36', 'Medical_History_37', 'Medical_History_38', 'Medical_History_39', \
                    'Medical_History_40', 'Medical_History_41']

numerical_cols = ['Product_Info_4', 'Ins_Age', 'Ht', 'Wt', 'BMI', 'Employment_Info_1', 'Employment_Info_4', \
                  'Employment_Info_6', 'Insurance_History_5', 'Family_Hist_2', 'Family_Hist_3', 'Family_Hist_4', \
                  'Family_Hist_5', 'Medical_History_1', 'Medical_History_15']

dummy_cols =  ['Medical_Keyword_1', 'Medical_Keyword_2', 'Medical_Keyword_3', 'Medical_Keyword_4', \
               'Medical_Keyword_5', 'Medical_Keyword_6', 'Medical_Keyword_7', 'Medical_Keyword_8', \
               'Medical_Keyword_9', 'Medical_Keyword_10', 'Medical_Keyword_11', 'Medical_Keyword_12', \
               'Medical_Keyword_13', 'Medical_Keyword_14', 'Medical_Keyword_15', 'Medical_Keyword_16', \
               'Medical_Keyword_17', 'Medical_Keyword_18', 'Medical_Keyword_19', 'Medical_Keyword_20', \
               'Medical_Keyword_21', 'Medical_Keyword_22', 'Medical_Keyword_23', 'Medical_Keyword_24', \
               'Medical_Keyword_25', 'Medical_Keyword_26', 'Medical_Keyword_27', 'Medical_Keyword_28', \
               'Medical_Keyword_29', 'Medical_Keyword_30', 'Medical_Keyword_31', 'Medical_Keyword_32', \
               'Medical_Keyword_33', 'Medical_Keyword_34', 'Medical_Keyword_35', 'Medical_Keyword_36', \
               'Medical_Keyword_37', 'Medical_Keyword_38', 'Medical_Keyword_39', 'Medical_Keyword_40', \
               'Medical_Keyword_41', 'Medical_Keyword_42', 'Medical_Keyword_43', 'Medical_Keyword_44', \
               'Medical_Keyword_45', 'Medical_Keyword_46', 'Medical_Keyword_47', 'Medical_Keyword_48']




In [67]:



# Checking remaining columns.
new_perc_mvs_per_col = (X_drop_some.isnull().sum() / n_samples) * 100
cols_remaining = list(new_perc_mvs_per_col[new_perc_mvs_per_col > 0].index)
X_drop_some[cols_remaining].info()






<class 'pandas.core.frame.DataFrame'>
Int64Index: 59381 entries, 0 to 59380
Data columns (total 10 columns):
Employment_Info_1      59362 non-null float64
Employment_Info_4      52602 non-null float64
Employment_Info_6      48527 non-null float64
Insurance_History_5    33985 non-null float64
Family_Hist_2          30725 non-null float64
Family_Hist_3          25140 non-null float64
Family_Hist_4          40197 non-null float64
Family_Hist_5          17570 non-null float64
Medical_History_1      50492 non-null float64
Medical_History_15     14785 non-null float64
dtypes: float64(10)
memory usage: 5.0 MB




In [68]:



# Replacing missing data with mean along the column.
X_imputed = X_drop_some
imp = Imputer(missing_values='NaN', strategy='mean', axis=0)
X_imputed.loc[:,cols_remaining] = imp.fit(X_drop_some[cols_remaining]).transform(X_drop_some[cols_remaining])




In [69]:



# Normalize numerical variables.
X_normalized = X_imputed
scaler = StandardScaler()
X_normalized.loc[:,numerical_cols] = scaler.fit(X_imputed[numerical_cols]).transform(X_imputed[numerical_cols])




In [70]:



# Separate categorical variables from the rest and turn them into a dictionary.
X_cat_dict = X_normalized[categorical_cols].T.to_dict().values()
X_rest = X_normalized.drop(categorical_cols, axis=1)

# Vectorize the categorical variables.
vectorizer = DictVectorizer(sparse=False)
X_cat_vec = vectorizer.fit_transform(X_cat_dict)
X = pd.DataFrame(np.hstack((X_rest, X_cat_vec)))

n_features = X.shape[1]
print "New number of features: {}".format(n_features)






New number of features: 142




In [71]:



def preprocess_data(X_raw, cols_to_drop, categorical_cols, numerical_cols, imp, scaler, vectorizer):
    X_drop_some = X_raw.drop(cols_to_drop, axis=1)
    
    X_imputed = X_drop_some
    X_imputed.loc[:,cols_remaining] = imp.fit(X_drop_some[cols_remaining]).transform(X_drop_some[cols_remaining])
    
    X_normalized = X_imputed
    X_normalized.loc[:,numerical_cols] = scaler.fit(X_imputed[numerical_cols]).transform(X_imputed[numerical_cols])
    
    X_cat_dict = X_normalized[categorical_cols].T.to_dict().values()
    X_rest = X_normalized.drop(categorical_cols, axis=1)

    X_cat_vec = vectorizer.transform(X_cat_dict)
    X = pd.DataFrame(np.hstack((X_rest, X_cat_vec)))
    return X




In [73]:



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)




In [76]:



def quadratic_weighted_kappa(y, y_pred):
    """
    Calculates the quadratic weighted kappa
    axquadratic_weighted_kappa calculates the quadratic weighted kappa
    value, which is a measure of inter-rater agreement between two raters
    that provide discrete numeric ratings.  Potential values range from -1
    (representing complete disagreement) to 1 (representing complete
    agreement).  A kappa value of 0 is expected if all agreement is due to
    chance.
    quadratic_weighted_kappa(rater_a, rater_b), where rater_a and rater_b
    each correspond to a list of integer ratings.  These lists must have the
    same length.
    The ratings should be integers, and it is assumed that they contain
    the complete range of possible ratings.
    quadratic_weighted_kappa(X, min_rating, max_rating), where min_rating
    is the minimum possible rating, and max_rating is the maximum possible
    rating
    """
    rater_a = y
    rater_b = y_pred
    min_rating=None
    max_rating=None
    rater_a = np.array(rater_a, dtype=int)
    rater_b = np.array(rater_b, dtype=int)
    assert(len(rater_a) == len(rater_b))
    if min_rating is None:
        min_rating = min(min(rater_a), min(rater_b))
    if max_rating is None:
        max_rating = max(max(rater_a), max(rater_b))
    conf_mat = confusion_matrix(rater_a, rater_b,
                                min_rating, max_rating)
    num_ratings = len(conf_mat)
    num_scored_items = float(len(rater_a))

    hist_rater_a = histogram(rater_a, min_rating, max_rating)
    hist_rater_b = histogram(rater_b, min_rating, max_rating)

    numerator = 0.0
    denominator = 0.0

    for i in range(num_ratings):
        for j in range(num_ratings):
            expected_count = (hist_rater_a[i] * hist_rater_b[j]
                              / num_scored_items)
            d = pow(i - j, 2.0) / pow(num_ratings - 1, 2.0)
            numerator += d * conf_mat[i][j] / num_scored_items
            denominator += d * expected_count / num_scored_items

    return (1.0 - numerator / denominator)




In [77]:



def performance_metric(y, y_pred):  
    y = np.array(y)
    y = y.astype(int)
    y_pred = np.array(y_pred)
    y_pred = np.clip(np.round(y_pred), np.min(y), np.max(y)).astype(int)   
    return quadratic_weighted_kappa(y_pred, y)




https://www.kaggle.com/jonathanslomka/prudential-life-insurance-assessment/python-xgboost-starter/run/113387
https://github.com/ChenglongChen/Kaggle_CrowdFlower/tree/master/Code/Model
http://nbviewer.jupyter.org/github/numb3r33/Kaggle-Competitions/blob/master/CrowdFlower/FeatureSelection.ipynb
http://nbviewer.jupyter.org/github/hugobowne/machine_learning_techniques/blob/master/homesite/initial_foray_insurance_grad_boosting.ipynb
http://nbviewer.jupyter.org/github/pennacchio/kaggle-prudential/tree/master/
https://www.kaggle.com/zeroblue/prudential-life-insurance-assessment/xgboost-with-optimized-offsets
https://www.kaggle.com/wawltorconner/prudential-life-insurance-assessment/nn-nn-nn/code

 

