
In [1]:

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns

In [2]:

user_df= pd.read_csv("train/users.csv")
prob_df= pd.read_csv("train/problems.csv")
sub_df= pd.read_csv("train/submissions.csv")

In [4]:

test_user_df= pd.read_csv("test/users.csv")
test_prob_df= pd.read_csv("test/problems.csv")
test_sub_df= pd.read_csv("test/test.csv")

In [15]:

test_prob_df.count()

Out[15]:

problem_id      956
level           752
accuracy        956
solved_count    956
error_count     956
rating          956
tag1            666
tag2            422
tag3            158
tag4             41
tag5              7
dtype: int64

In [16]:

test_sub_df.count()

Out[16]:

Id            35618
user_id       35618
problem_id    35618
dtype: int64

In [17]:

test_user_df.count()

Out[17]:

user_id         15279
skills          15279
solved_count    15279
attempts        15279
user_type        8459
dtype: int64

In [5]:

user_df.count()

Out[5]:

user_id         62530
skills          62271
solved_count    62530
attempts        62530
user_type       34215
dtype: int64

In [6]:

prob_df.count()

Out[6]:

problem_id      1002
level            768
accuracy        1002
solved_count    1002
error_count     1002
rating          1002
tag1             725
tag2             473
tag3             181
tag4              46
tag5               6
dtype: int64

In [7]:

sub_df.count()

Out[7]:

user_id           1198131
problem_id        1198131
solved_status     1198131
result            1198131
language_used     1198131
execution_time    1198131
dtype: int64

In [12]:

merged_inner = pd.merge(user_df,sub_df,on='user_id')

In [18]:

test_merged_inner = pd.merge(test_user_df,test_sub_df,on='user_id')

In [20]:

test_merged_inner1 = pd.merge(left=test_merged_inner,right=test_prob_df,left_on='problem_id', right_on='problem_id')

In [21]:

test_merged_inner1.count()

Out[21]:

user_id           35618
skills            35618
solved_count_x    35618
attempts          35618
user_type         20550
Id                35618
problem_id        35618
level             32167
accuracy          35618
solved_count_y    35618
error_count       35618
rating            35618
tag1              27502
tag2              16562
tag3               4042
tag4                673
tag5                280
dtype: int64

In [22]:

merged_inner.head()

Out[22]:
	user_id 	skills 	solved_count 	attempts 	user_type 	problem_id 	solved_status 	result 	language_used 	execution_time
0 	1427919 	C++ 	0 	11 	W 	913736 	AT 	PAC 	C++ 	0.5874
1 	1427919 	C++ 	0 	11 	W 	913736 	AT 	PAC 	C++ 	0.5603
2 	1427919 	C++ 	0 	11 	W 	913736 	AT 	PAC 	C++ 	0.5696
3 	1427919 	C++ 	0 	11 	W 	913736 	AT 	PAC 	C++ 	0.5666
4 	1427919 	C++ 	0 	11 	W 	913736 	AT 	PAC 	C++ 	0.5656
In [23]:

merged_inner.drop('language_used', axis=1, inplace=True)
merged_inner.drop('result', axis=1, inplace=True)
merged_inner.drop('execution_time', axis=1, inplace=True)

In [24]:

merged_inner.drop_duplicates(inplace=True)

In [25]:

merged_inner.drop('user_type', axis=1, inplace=True)

In [27]:

test_merged_inner1.drop('user_type', axis=1, inplace=True)

In [32]:

merged_inner.head()

Out[32]:
	user_id 	skills 	solved_count 	attempts 	problem_id 	solved_status
0 	1427919 	C++ 	0 	11 	913736 	AT
11 	1034704 	C 	3 	11 	906741 	AT
13 	1034704 	C 	3 	11 	906741 	SO
15 	1034704 	C 	3 	11 	909152 	SO
17 	1034704 	C 	3 	11 	909145 	SO
In [33]:

test_merged_inner1.head()

Out[33]:
	user_id 	skills 	solved_count_x 	attempts 	Id 	problem_id 	level 	accuracy 	solved_count_y 	error_count 	rating 	tag1 	tag2 	tag3 	tag4 	tag5
0 	1444303 	Python 	0 	5 	14425 	940002 	E 	0.42 	63 	371 	3.7 	Ad-Hoc 	Basic Programming 	Implementation 	NaN 	NaN
1 	1461057 	Python 	0 	2 	18638 	940002 	E 	0.42 	63 	371 	3.7 	Ad-Hoc 	Basic Programming 	Implementation 	NaN 	NaN
2 	1002312 	Python|PHP 	0 	5 	9929 	940002 	E 	0.42 	63 	371 	3.7 	Ad-Hoc 	Basic Programming 	Implementation 	NaN 	NaN
3 	1002353 	Python 	14 	6 	20229 	940002 	E 	0.42 	63 	371 	3.7 	Ad-Hoc 	Basic Programming 	Implementation 	NaN 	NaN
4 	1068032 	Python|C|Java|C++ 	84 	36 	25139 	940002 	E 	0.42 	63 	371 	3.7 	Ad-Hoc 	Basic Programming 	Implementation 	NaN 	NaN
In [34]:

merged_inner.corr()

Out[34]:
	user_id 	solved_count 	attempts 	problem_id
user_id 	1.000000 	-0.120974 	-0.168427 	0.351435
solved_count 	-0.120974 	1.000000 	0.737944 	0.039585
attempts 	-0.168427 	0.737944 	1.000000 	-0.017755
problem_id 	0.351435 	0.039585 	-0.017755 	1.000000
In [35]:

merged_inner1 = pd.merge(left=merged_inner,right=prob_df,left_on='problem_id', right_on='problem_id')

In [38]:

merged_inner1.count()

Out[38]:

user_id           516086
skills            516086
solved_count_x    516086
attempts          516086
problem_id        516086
solved_status     516086
level             475645
accuracy          516086
solved_count_y    516086
error_count       516086
rating            516086
tag1              448577
tag2              300295
tag3               97188
tag4               20003
tag5                4782
dtype: int64

In [39]:

merged_inner1.drop('tag5', axis=1, inplace=True)

merged_inner1.drop('tag4', axis=1, inplace=True)

merged_inner1.drop('tag3', axis=1, inplace=True)

merged_inner1.drop('tag2', axis=1, inplace=True)

merged_inner1.drop('tag1', axis=1, inplace=True)

In [40]:

test_merged_inner1.drop('tag5', axis=1, inplace=True)

test_merged_inner1.drop('tag4', axis=1, inplace=True)

test_merged_inner1.drop('tag3', axis=1, inplace=True)

test_merged_inner1.drop('tag2', axis=1, inplace=True)

test_merged_inner1.drop('tag1', axis=1, inplace=True)

In [41]:

merged_inner1.drop('skills', axis=1, inplace=True)
merged_inner1.drop('level', axis=1, inplace=True)

In [42]:

test_merged_inner1.drop('skills', axis=1, inplace=True)
test_merged_inner1.drop('level', axis=1, inplace=True)

In [43]:

merged_inner1.head()

Out[43]:
	user_id 	solved_count_x 	attempts 	problem_id 	solved_status 	accuracy 	solved_count_y 	error_count 	rating
0 	1427919 	0 	11 	913736 	AT 	0.21 	524 	7868 	4
1 	1187633 	14 	20 	913736 	AT 	0.21 	524 	7868 	4
2 	1187633 	14 	20 	913736 	SO 	0.21 	524 	7868 	4
3 	1165859 	2 	14 	913736 	AT 	0.21 	524 	7868 	4
4 	1034822 	6 	11 	913736 	AT 	0.21 	524 	7868 	4
In [44]:

test_merged_inner1.head()

Out[44]:
	user_id 	solved_count_x 	attempts 	Id 	problem_id 	accuracy 	solved_count_y 	error_count 	rating
0 	1444303 	0 	5 	14425 	940002 	0.42 	63 	371 	3.7
1 	1461057 	0 	2 	18638 	940002 	0.42 	63 	371 	3.7
2 	1002312 	0 	5 	9929 	940002 	0.42 	63 	371 	3.7
3 	1002353 	14 	6 	20229 	940002 	0.42 	63 	371 	3.7
4 	1068032 	84 	36 	25139 	940002 	0.42 	63 	371 	3.7
In [45]:

merged_inner1.solved_status.unique()

Out[45]:

array(['AT', 'SO', 'UK'], dtype=object)

In [46]:

merged_inner1 = merged_inner1[merged_inner1.solved_status != 'UK']

In [48]:

def transform_solved_status(ss):
    if (ss == 'SO'):
        return 1
    if (ss == 'AT'):
        return 0

In [49]:

merged_inner1['solved_status'] = merged_inner1['solved_status'].map(transform_solved_status)

/home/anil/anaconda/lib/python2.7/site-packages/IPython/kernel/__main__.py:2: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  from IPython.kernel.zmq import kernelapp as app

In [50]:

merged_inner1.head()

Out[50]:
	user_id 	solved_count_x 	attempts 	problem_id 	solved_status 	accuracy 	solved_count_y 	error_count 	rating
0 	1427919 	0 	11 	913736 	0 	0.21 	524 	7868 	4
1 	1187633 	14 	20 	913736 	0 	0.21 	524 	7868 	4
2 	1187633 	14 	20 	913736 	1 	0.21 	524 	7868 	4
3 	1165859 	2 	14 	913736 	0 	0.21 	524 	7868 	4
4 	1034822 	6 	11 	913736 	0 	0.21 	524 	7868 	4
In [72]:

merged_inner1['accuracy'] = (merged_inner1.accuracy*10).apply(np.round)

/home/anil/anaconda/lib/python2.7/site-packages/IPython/kernel/__main__.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  if __name__ == '__main__':

In [214]:

test_merged_inner1['accuracy'] = (test_merged_inner1.accuracy*10).apply(np.round)

In [215]:

test_merged_inner1.accuracy.unique()

Out[215]:

array([  4.,   3.,   9.,   7.,   2.,   6.,   5.,   8.,  10.,   1.,   0.])

In [83]:

sns.factorplot('accuracy',data=merged_inner1,kind="count",hue='solved_status',order=[1,2,3,4,5,6,7,8,9,10])

Out[83]:

<seaborn.axisgrid.FacetGrid at 0x7f10cbe539d0>

In [56]:

merged_inner1.rating.unique()

Out[56]:

array([ 4.,  0.,  5.,  3.,  2.,  1.])

In [55]:

merged_inner1['rating'] = merged_inner1['rating'].apply(np.round)

/home/anil/anaconda/lib/python2.7/site-packages/IPython/kernel/__main__.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  if __name__ == '__main__':

In [84]:

sns.factorplot('rating',data=merged_inner1,kind="count",size=5)

Out[84]:

<seaborn.axisgrid.FacetGrid at 0x7f10c92d5c90>

In [85]:

sns.factorplot('rating',data=merged_inner1,kind="count",hue="solved_status",size=5)

Out[85]:

<seaborn.axisgrid.FacetGrid at 0x7f10c8ed6ed0>

In [216]:

from sklearn.cross_validation import train_test_split
X_train,X_test,Y_train,y_test = train_test_split(merged_inner1[['solved_count_x','accuracy']],merged_inner1.solved_status)

In [189]:

y_test.unique()

Out[189]:

array([1, 0])

In [130]:

from sklearn.svm import LinearSVC
svm = LinearSVC(C=0.1)
svm.fit(X_train,Y_train)

svm.score(X_train,Y_train)

Out[130]:

0.6998610013073111

In [131]:

svm.score(X_test,y_test)

Out[131]:

0.70168734837504554

In [217]:

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=15,random_state=33,max_depth=20)

rf.fit(X_train,Y_train)

rf.score(X_train,Y_train)

Out[217]:

0.71956884569078217

In [218]:

rf.score(X_test,y_test)

Out[218]:

0.71524349126872788

In [219]:

class_predict = rf.predict(X_test)
print metrics.accuracy_score(y_test,class_predict)

0.715243491269

In [194]:

X_test.head()

Out[194]:
	solved_count_x 	accuracy 	rating
486197 	86 	9 	4
19776 	15 	6 	4
379120 	8 	6 	0
143997 	10 	5 	2
290205 	3 	3 	3
In [195]:

test_merged_inner1.head()

Out[195]:
	user_id 	solved_count_x 	attempts 	Id 	problem_id 	accuracy 	solved_count_y 	error_count 	rating
0 	1444303 	0 	5 	14425 	940002 	0.42 	63 	371 	3.7
1 	1461057 	0 	2 	18638 	940002 	0.42 	63 	371 	3.7
2 	1002312 	0 	5 	9929 	940002 	0.42 	63 	371 	3.7
3 	1002353 	14 	6 	20229 	940002 	0.42 	63 	371 	3.7
4 	1068032 	84 	36 	25139 	940002 	0.42 	63 	371 	3.7
In [220]:

test_predict = rf.predict(test_merged_inner1[['solved_count_x','accuracy']])

In [221]:

test_predict_df = pd.DataFrame(test_predict)
test_predict_df.count()

Out[221]:

0    35618
dtype: int64

In [222]:

test_predict_df.to_csv('submission-1.csv')

In [196]:

 

0.70969392105

In [134]:

def importances(estimator, col_array, title): 
    # Calculate the feature ranking - Top 10
    importances = estimator.feature_importances_
    indices = np.argsort(importances)[::-1]
    print "%s Top 20 Important Features\n" %title
    for f in range(4):
        print("%d. %s (%f)" % (f + 1, col_array.columns[indices[f]], importances[indices[f]]))
#Mean Feature Importance
    print "\nMean Feature Importance %.6f" %np.mean(importances)

In [135]:

importances(rf, merged_inner1[['solved_count_x','solved_count_y','accuracy','rating']], "Cover Type (Initial RF)")

Cover Type (Initial RF) Top 20 Important Features

1. solved_count_x (0.489686)
2. accuracy (0.265104)
3. solved_count_y (0.245210)

---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-135-af0cb62e51be> in <module>()
----> 1 importances(rf, merged_inner1[['solved_count_x','solved_count_y','accuracy','rating']], "Cover Type (Initial RF)")

<ipython-input-134-6ac5ae1318a9> in importances(estimator, col_array, title)
      7     print "%s Top 20 Important Features\n" %title
      8     for f in range(4):
----> 9         print("%d. %s (%f)" % (f + 1, col_array.columns[indices[f]], importances[indices[f]]))
     10 #Mean Feature Importance
     11     print "\nMean Feature Importance %.6f" %np.mean(importances)

IndexError: index 3 is out of bounds for axis 0 with size 3

In [15]:

merged_inner1.drop('error_count', axis=1, inplace=True)

merged_inner1.drop('solved_count_x', axis=1, inplace=True)

merged_inner1.drop('solved_count_y', axis=1, inplace=True)

merged_inner1.drop('accuracy', axis=1, inplace=True)

merged_inner1.drop('attempts', axis=1, inplace=True)

---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-15-6d80535d7488> in <module>()
----> 1 merged_inner1.drop('error_count', axis=1, inplace=True)
      2 
      3 merged_inner1.drop('solved_count_x', axis=1, inplace=True)
      4 
      5 merged_inner1.drop('solved_count_y', axis=1, inplace=True)

NameError: name 'merged_inner1' is not defined

In [101]:

from sklearn.neighbors import KNeighborsClassifier
cls = KNeighborsClassifier()
cls.fit(X_train,Y_train)
print cls.score(X_train,Y_train)
print cls.score(X_test,y_test)

0.67098389372

---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-101-52b8ada7b6ed> in <module>()
      3 cls.fit(X_train,Y_train)
      4 print cls.score(X_train,Y_train)
----> 5 print cls.score(X_test,y_test)

/home/anil/anaconda/lib/python2.7/site-packages/sklearn/base.pyc in score(self, X, y, sample_weight)
    293         """
    294         from .metrics import accuracy_score
--> 295         return accuracy_score(y, self.predict(X), sample_weight=sample_weight)
    296 
    297 

/home/anil/anaconda/lib/python2.7/site-packages/sklearn/neighbors/classification.pyc in predict(self, X)
    136         X = check_array(X, accept_sparse='csr')
    137 
--> 138         neigh_dist, neigh_ind = self.kneighbors(X)
    139 
    140         classes_ = self.classes_

/home/anil/anaconda/lib/python2.7/site-packages/sklearn/neighbors/base.pyc in kneighbors(self, X, n_neighbors, return_distance)
    372                     "or set algorithm='brute'" % self._fit_method)
    373             result = self._tree.query(X, n_neighbors,
--> 374                                       return_distance=return_distance)
    375         else:
    376             raise ValueError("internal: _fit_method not recognized")

KeyboardInterrupt: 

In [147]:

from sklearn.cross_validation import cross_val_score
import numpy as np
scores = cross_val_score(rf,merged_inner1[['solved_count_x','accuracy']],merged_inner1.solved_status)
print (scores)
print (np.mean(scores))

[ 0.69775905  0.71869623  0.72940404]
0.715286437243

In [18]:

from sklearn.cross_validation import cross_val_score
import numpy as np
scores = cross_val_score(cls,merged_inner1.ix[:, merged_inner1.columns != 'solved_status'],merged_inner1.solved_status)
print (scores)
print (np.mean(scores))

---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-18-bfeabb846b3c> in <module>()
      1 from sklearn.cross_validation import cross_val_score
      2 import numpy as np
----> 3 scores = cross_val_score(cls,merged_inner1.ix[:, merged_inner1.columns != 'solved_status'],merged_inner1.solved_status)
      4 print (scores)
      5 print (np.mean(scores))

NameError: name 'merged_inner1' is not defined

In [19]:

from sklearn.cross_validation import cross_val_score
import numpy as np
scores = cross_val_score(svm,merged_inner1[['solved_count_x','solved_count_y','accuracy','rating']],merged_inner1.solved_status)
print (scores)
print (np.mean(scores))

---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-19-f7e99e615668> in <module>()
      1 from sklearn.cross_validation import cross_val_score
      2 import numpy as np
----> 3 scores = cross_val_score(svm,merged_inner1.ix[:, merged_inner1.columns != 'solved_status'],merged_inner1.solved_status)
      4 print (scores)
      5 print (np.mean(scores))

NameError: name 'merged_inner1' is not defined

In [167]:

from sklearn.linear_model import LogisticRegression
from sklearn import metrics

log_model2 = LogisticRegression()

log_model2.fit(X_train,Y_train)

Out[167]:

LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class='ovr',
          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,
          verbose=0)

In [168]:

class_predict = log_model2.predict(X_test)
print metrics.accuracy_score(y_test,class_predict)

0.694781388788

In [ ]:

 

